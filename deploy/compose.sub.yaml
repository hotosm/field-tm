# Copyright (c) Humanitarian OpenStreetMap Team
# This file is part of Field-TM.
#
#     Field-TM is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Field-TM is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Field-TM.  If not, see <https:#www.gnu.org/licenses/>.
#

name: fmtm

volumes:
  fmtm_frontend:
    name: fmtm-frontend
  fmtm_mapper_frontend:
    name: fmtm-mapper-frontend
  fmtm_db_data:
    name: fmtm-db-data
  fmtm_data:
    name: fmtm-s3-data
  fmtm_logs:
    name: fmtm-logs
  fmtm_images:
    name: fmtm-images
  fmtm_tiles:
    name: fmtm-tiles
  certs:
    name: fmtm-certs
  central_db_data:
    name: fmtm-central-db-data
  central_frontend:
    name: fmtm-central-frontend

networks:
  fmtm-net:
    name: fmtm
    ipam:
      driver: default
      config:
        - subnet: 10.20.30.0/24

services:
  proxy:
    image: "bunkerity/bunkerweb-all-in-one:1.6.2"
    depends_on:
      # Frontends must be built and available first
      ui:
        condition: service_completed_successfully
      central-ui:
        condition: service_completed_successfully
    volumes:
      # - certs:/etc/letsencrypt
      - certs:/data
      - fmtm_frontend:/var/www/html/${FMTM_DOMAIN}:ro
      - fmtm_mapper_frontend:/var/www/html/${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN}:ro
      - central_frontend:/var/www/html/${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}:ro
    environment:
      # General
      BUNKERWEB_INSTANCES: proxy:5000
      LOG_LEVEL: notice
      UI_WIZARD: no
      USE_BUNKERNET: no
      DISABLE_DEFAULT_SERVER: yes
      USE_REDIS: no
      # NOTE for bunkerweb nginx it uses the 'resolver' directive:
      # https://nginx.org/en/docs/http/ngx_http_core_module.html#resolver
      # However, nerdctl hardcodes container aliases to /etc/hosts, which
      # cannot be read by Nginx. So we must use a custom dnsmasq resolver
      # service for now.
      # More details: https://github.com/containerd/nerdctl/issues/1387
      # and: https://github.com/bunkerity/bunkerweb/discussions/2221
      #
      DNS_RESOLVERS: 10.20.30.53
      API_WHITELIST_IP: 127.0.0.0/8 10.20.30.0/24
      # Avoid running ModSec rules on internal service calls
      WHITELIST_IP: 10.20.30.0/24
      WHITELIST_URI: https://${FMTM_DOMAIN}
      MULTISITE: yes
      USE_REVERSE_PROXY: yes
      # Required for electric headers electric-offset, electric-handle, electric-schema,electric-cursor,electric-up-to-date
      KEEP_UPSTREAM_HEADERS: yes
      REVERSE_PROXY_INTERCEPT_ERRORS: no
      ALLOWED_METHODS: OPTIONS|HEAD|GET|POST|PATCH|PUT|DELETE
      USE_REAL_IP: yes
      SERVE_FILES: yes
      USE_BACKUP: no
      USE_METRICS: no
      # USE_ANTIBOT: yes
      USE_LIMIT_CONN: yes
      # BAD_BEHAVIOUR disabled as it's difficult to work with...
      USE_BAD_BEHAVIOR: no
      USE_LIMIT_REQ: yes
      USE_MODSECURITY: yes
      USE_GZIP: yes
      # On client, brotli is preferred over gzip if both are enabled
      USE_BROTLI: yes
      # For OpenTelemetry (Allow-Headers are what the browser can include in the REQUEST headers)
      CUSTOM_HEADER: "Access-Control-Allow-Headers: DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,traceparent,tracestate"
      AUTO_LETS_ENCRYPT: yes
      EMAIL_LETS_ENCRYPT: ${CERT_EMAIL}
      # USE_LETS_ENCRYPT_STAGING: yes
      # Reverse proxy configs
      SERVER_NAME: ${FMTM_DOMAIN} ${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN} ${FMTM_API_DOMAIN:-api.$FMTM_DOMAIN} ${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN} ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN} ${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}
      # We need this to allow for client-side routing in the SPA (from index.html)
      ${FMTM_DOMAIN}_ERRORS: 404=/index.html
      ${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN}_ERRORS: 404=/index.html
      ${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN}_MAX_CLIENT_SIZE: 1G
      # We allow accelerometer, camera, fullscreen, geolocation, magnetometer, gyroscope
      ${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN}_PERMISSIONS_POLICY: accelerometer=(self), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(self), compute-pressure=(), display-capture=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(self), gamepad=(), geolocation=(self), gyroscope=(self), hid=(), identity-credentials-get=(), idle-detection=(), local-fonts=(), magnetometer=(self), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=(), interest-cohort=()
      # CORS for the backend is configured by FastAPI
      ${FMTM_API_DOMAIN:-api.$FMTM_DOMAIN}_REVERSE_PROXY_HOST: http://api:8000
      ${FMTM_API_DOMAIN:-api.$FMTM_DOMAIN}_MAX_CLIENT_SIZE: 1G
      # Increase timeout slightly for long project creation requests
      ${FMTM_API_DOMAIN:-api.$FMTM_DOMAIN}_REVERSE_PROXY_READ_TIMEOUT: 90s
      ${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN}_REVERSE_PROXY_HOST: http://s3:9000
      ${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN}_MAX_CLIENT_SIZE: 10G
      # CORS must be enabled for Minio to work
      ${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN}_USE_CORS: yes
      ${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN}_CORS_ALLOW_ORIGIN: https://${FMTM_DOMAIN}
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_REVERSE_PROXY_HOST: http://electric:3000
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_MAX_CLIENT_SIZE: 1G
      # CORS must be enabled for Electric to work
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_USE_CORS: yes
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_CORS_ALLOW_ORIGIN: https://${FMTM_MAPPER_DOMAIN:-mapper.$FMTM_DOMAIN}
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_CORS_ALLOW_METHODS: GET, HEAD, DELETE, OPTIONS
      # Expose-Headers are RESPONSE headers the browser is allowed to access
      ${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}_CORS_EXPOSE_HEADERS: electric-offset,electric-handle,electric-schema,electric-cursor,electric-up-to-date
      ${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}_REVERSE_PROXY_HOST: http://central:8383
      ${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}_REVERSE_PROXY_URL: ~ ^/v\d
      # buffer requests, but not responses, so streaming out works
      ${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}_REVERSE_PROXY_BUFFERING: no
      ${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}_MAX_CLIENT_SIZE: 1G
    ports:
      - 80:8080
      - 443:8443
    networks:
      - fmtm-net
    restart: "unless-stopped"

  # Required as nginx via nerdctl cannot resolve container aliases
  dns:
    image: "docker.io/4km3/dnsmasq:2.90-r3"
    command: [
        "-k", # keep in foreground
        "--log-facility=-", # log to stdout
        "--server=1.1.1.1", # forward to Cloudflare DNS
        "--server=8.8.8.8", # forward to Google DNS
        "--listen-address=127.0.0.1",
        "--listen-address=10.20.30.53", # DNS server inside your network
        "--addn-hosts=/etc/hosts", # use /etc/hosts injected by nerdctl
      ]
    networks:
      fmtm-net:
        ipv4_address: 10.20.30.53
    restart: unless-stopped

  api:
    image: "ghcr.io/hotosm/field-tm/backend:${GIT_BRANCH}"
    volumes:
      - fmtm_logs:/opt/logs
    depends_on:
      proxy:
        condition: service_healthy
      fmtm-db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      s3:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/__lbheartbeat__"]
      start_period: 60s
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          cpus: "0.9"
          memory: 1500M
        reservations:
          cpus: "0.1"
          memory: 100M

  ui:
    # This service simply builds both frontends to volumes
    # accessible to the proxy, then shuts down
    image: "ghcr.io/hotosm/field-tm/frontend:${GIT_BRANCH:-dev}"
    build:
      context: ../src
      dockerfile: Dockerfile.ui.prod
      args:
        APP_VERSION: ${GIT_BRANCH}
        VITE_API_URL: https://${FMTM_API_DOMAIN:-api.$FMTM_DOMAIN}
        VITE_SYNC_URL: https://${FMTM_SYNC_DOMAIN:-sync.$FMTM_DOMAIN}
        VITE_S3_URL: https://${FMTM_S3_DOMAIN:-s3.$FMTM_DOMAIN}
    volumes:
      - fmtm_frontend:/frontend/manager
      - fmtm_mapper_frontend:/frontend/mapper
    network_mode: none
    restart: "on-failure:2"

  central:
    image: "ghcr.io/hotosm/field-tm/odkcentral:v2025.2.1"
    depends_on:
      proxy:
        condition: service_healthy
      central-db:
        condition: service_healthy
      s3:
        condition: service_healthy
      pyxform:
        condition: service_started
    environment:
      - DOMAIN=${FMTM_ODK_DOMAIN:-odk.$FMTM_DOMAIN}
      - SSL_TYPE=upstream
      - SYSADMIN_EMAIL=${ODK_CENTRAL_USER}
      - SYSADMIN_PASSWD=${ODK_CENTRAL_PASSWD}
      - HTTPS_PORT=443
      - DB_HOST=${CENTRAL_DB_HOST:-central-db}
      - DB_USER=${CENTRAL_DB_USER}
      - DB_PASSWORD=${CENTRAL_DB_PASSWORD}
      - DB_NAME=${CENTRAL_DB_NAME}
      - DB_SSL=null
      - EMAIL_FROM=${ODK_CENTRAL_USER}
      - EMAIL_HOST=${EMAIL_HOST:-mail}
      - EMAIL_PORT=${EMAIL_PORT:-25}
      - EMAIL_SECURE=${EMAIL_SECURE:-false}
      - EMAIL_IGNORE_TLS=${EMAIL_IGNORE_TLS:-true}
      - EMAIL_USER=${EMAIL_USER:-''}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-''}
      - OIDC_ENABLED=${OIDC_ENABLED:-false}
      - OIDC_ISSUER_URL=${OIDC_ISSUER_URL:-https://getodk.org}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-xxx}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET:-xxx}
      - SENTRY_ORG_SUBDOMAIN=${SENTRY_ORG_SUBDOMAIN:-o130137}
      - SENTRY_KEY=${SENTRY_KEY:-3cf75f54983e473da6bd07daddf0d2ee}
      - SENTRY_PROJECT=${SENTRY_PROJECT:-1298632}
      - SENTRY_TRACE_RATE=${SENTRY_TRACE_RATE:-100000}
      - S3_SERVER=${S3_ENDPOINT}
      - S3_BUCKET_NAME=${S3_ODK_BUCKET_NAME:-"fmtm-odk-media"}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: nc -z localhost 8383 || exit 1
      start_period: 15s
      interval: 10s
      timeout: 5s
      retries: 10

  central-webhook:
    image: "ghcr.io/hotosm/central-webhook:0.3.0"
    depends_on:
      central:
        condition: service_healthy
    environment:
      CENTRAL_WEBHOOK_DB_URI: postgresql://${CENTRAL_DB_USER}:${CENTRAL_DB_PASSWORD}@central-db:5432/${CENTRAL_DB_NAME}?sslmode=disable
      CENTRAL_WEBHOOK_UPDATE_ENTITY_URL: http://api:8000/integrations/webhooks/entity-status
      # CENTRAL_WEBHOOK_REVIEW_SUBMISSION_URL: http://api:8000/integrations/webhooks/entity-status
      CENTRAL_WEBHOOK_API_KEY: ${CENTRAL_WEBHOOK_API_KEY}
      CENTRAL_WEBHOOK_LOG_LEVEL: ${CENTRAL_WEBHOOK_LOG_LEVEL:-INFO}
    networks:
      - fmtm-net
    restart: "unless-stopped"

  pyxform:
    image: "ghcr.io/getodk/pyxform-http:v3.0.0"
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-ui:
    # This service simply builds the frontend to a volume
    # accessible to the proxy, then shuts down
    image: "ghcr.io/hotosm/field-tm/odkcentral-ui:v2025.2.1"
    volumes:
      - central_frontend:/frontend
    network_mode: none
    restart: "on-failure:2"

  s3:
    image: "docker.io/minio/minio:RELEASE.2025-01-20T14-49-07Z"
    depends_on:
      proxy:
        condition: service_started
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_VOLUMES: "/mnt/data"
      MINIO_BROWSER: "off"
    volumes:
      - fmtm_data:/mnt/data
    networks:
      - fmtm-net
    command: minio server
    restart: "unless-stopped"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      retries: 3
      start_period: 5s
      timeout: 5s

  fmtm-db:
    image: "ghcr.io/hotosm/postgis:16-3.5-alpine"
    # Low max_connections for better performance.
    # See https://richyen.com/postgres/2021/09/03/less-is-more-max-connections.html
    # and other sources online. Approx (cores * 4)
    # Plus electric-sql defaults to need 20 connections (64+20)
    command: -c 'max_connections=84' -c 'wal_level=logical'
    volumes:
      - fmtm_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${FMTM_DB_USER}
      - POSTGRES_PASSWORD=${FMTM_DB_PASSWORD}
      - POSTGRES_DB=${FMTM_DB_NAME}
    ports:
      - "5433:5432"
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: pg_isready -U ${FMTM_DB_USER} -d ${FMTM_DB_NAME}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  electric:
    image: "electricsql/electric:1.0.22"
    depends_on:
      proxy:
        condition: service_started
      fmtm-db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${FMTM_DB_USER}:${FMTM_DB_PASSWORD}@${FMTM_DB_HOST:-fmtm-db}/${FMTM_DB_NAME:-fmtm}?sslmode=disable
      # Do not set ELECTRIC_SECRET var for now, until docs are available for how it actually works...
      # The frontend ShapeStream should then use params.api_secret? Or perhaps set via proxy somehow?
      ELECTRIC_INSECURE: true
      # OTEL_EXPORT: otlp
      # OTLP_ENDPOINT: https://...
      # ELECTRIC_WRITE_TO_PG_MODE: direct_writes
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-db:
    image: "ghcr.io/hotosm/postgis:14-3.5-alpine"
    command: -c 'max_connections=64'
    volumes:
      - central_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${CENTRAL_DB_USER}
      - POSTGRES_PASSWORD=${CENTRAL_DB_PASSWORD}
      - POSTGRES_DB=${CENTRAL_DB_NAME}
    ports:
      - "5434:5432"
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: pg_isready -U ${CENTRAL_DB_USER} -d ${CENTRAL_DB_NAME}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  migrations:
    image: "ghcr.io/hotosm/field-tm/backend:${GIT_BRANCH}"
    depends_on:
      proxy:
        condition: service_healthy
      fmtm-db:
        condition: service_healthy
      s3:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fmtm-net
    entrypoint: ["/migrate-entrypoint.sh"]
    restart: "on-failure:2"

  scheduler:
    extends:
      file: ../compose.yaml
      service: scheduler
    image: "ghcr.io/hotosm/field-tm/backend:${GIT_BRANCH}"
