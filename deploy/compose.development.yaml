# Copyright (c) 2022, 2023 Humanitarian OpenStreetMap Team
# This file is part of FMTM.
#
#     FMTM is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     FMTM is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with FMTM.  If not, see <https:#www.gnu.org/licenses/>.
#

name: fmtm-dev

volumes:
  fmtm_frontend:
    name: fmtm-frontend-${GIT_BRANCH}
  fmtm_db_data:
    name: fmtm-db-data-${GIT_BRANCH}
  fmtm_data:
    name: fmtm-s3-data-${GIT_BRANCH}
  fmtm_logs:
    name: fmtm-logs-${GIT_BRANCH}
  fmtm_images:
    name: fmtm-images-${GIT_BRANCH}
  fmtm_tiles:
    name: fmtm-tiles-${GIT_BRANCH}
  certs:
    name: fmtm-certs-${GIT_BRANCH}
  certbot_data:
    name: fmtm-certbot-data-${GIT_BRANCH}
  central_db_data:
    name: fmtm-central-db-data-${GIT_BRANCH}
  central_frontend:
    name: fmtm-central-frontend-${GIT_BRANCH}

networks:
  fmtm-net:
    name: fmtm-${GIT_BRANCH}

services:
  proxy:
    image: "ghcr.io/hotosm/fmtm/proxy:${GIT_BRANCH}"
    depends_on:
      api:
        condition: service_started
      central:
        condition: service_started
      central-ui:
        condition: service_completed_successfully
      s3:
        condition: service_healthy
      certbot:
        condition: service_completed_successfully
      ui:
        condition: service_completed_successfully
      electric:
        condition: service_started
    volumes:
      - fmtm_frontend:/usr/share/nginx/html/fmtm
      - central_frontend:/usr/share/nginx/html/central/
      - certs:/etc/letsencrypt
      - certbot_data:/var/www/certbot
    environment:
      FMTM_DOMAIN: ${FMTM_DOMAIN}
      FMTM_API_DOMAIN: ${FMTM_API_DOMAIN:-api.${FMTM_DOMAIN}}
      FMTM_ODK_DOMAIN: ${FMTM_ODK_DOMAIN:-odk.${FMTM_DOMAIN}}
      FMTM_S3_DOMAIN: ${FMTM_S3_DOMAIN:-s3.${FMTM_DOMAIN}}
      FMTM_SYNC_DOMAIN: ${FMTM_SYNC_DOMAIN:-sync.${FMTM_DOMAIN}}
    ports:
      - 80:80
      - 443:443
    networks:
      - fmtm-net
    restart: "unless-stopped"

  # proxy:
  #   image: "ghcr.io/bunkerity/bunkerweb:1.5.9"
  #   depends_on:
  #     proxy-config:
  #       condition: service_started
  #     api:
  #       condition: service_started
  #     ui:
  #       condition: service_started
  #     central:
  #       condition: service_started
  #       required: false
  #     central-ui:
  #       condition: service_completed_successfully
  #       required: false
  #     s3:
  #       condition: service_started
  #   volumes:
  #     - nginx-configs:/etc/nginx
  #     - central_frontend:/var/www/html/odk.fmtm.localhost:ro
  #   environment:
  #     # General
  #     LOG_LEVEL: notice
  #     API_WHITELIST_IP: 127.0.0.0/8 10.20.30.0/24
  #     MULTISITE: yes
  #     USE_REVERSE_PROXY: yes
  #     REVERSE_PROXY_INTERCEPT_ERRORS: no
  #     ALLOWED_METHODS: HEAD|GET|POST|PATCH|PUT|DELETE
  #     USE_REAL_IP: yes
  #     SERVE_FILES: yes
  #     USE_BACKUP: no
  #     USE_METRICS: no
  #     # USE_ANTIBOT: yes
  #     USE_BAD_BEHAVIOR: yes
  #     USE_LIMIT_REQ: yes
  #     USE_MODSECURITY: yes
  #     USE_BROTLI: yes
  #     # For OpenTelemetry
  #     CUSTOM_HEADER: "Access-Control-Allow-Headers: 'traceparent,tracestate'"
  #     # AUTO_LETS_ENCRYPT: yes
  #     # EMAIL_LETS_ENCRYPT:
  #     # USE_LETS_ENCRYPT_STAGING: yes
  #     # Reverse proxy configs
  #     SERVER_NAME: fmtm.localhost api.fmtm.localhost s3.fmtm.localhost odk.fmtm.localhost odkcentral
  #     fmtm.localhost_REVERSE_PROXY_HOST: http://ui:7051
  #     fmtm.localhost_MAX_CLIENT_SIZE: 1G
  #     api.fmtm.localhost_REVERSE_PROXY_HOST: http://api:8000
  #     api.fmtm.localhost_MAX_CLIENT_SIZE: 1G
  #     s3.fmtm.localhost_REVERSE_PROXY_HOST: http://s3:9000
  #     s3.fmtm.localhost_MAX_CLIENT_SIZE: 10G
  #     odk.fmtm.localhost_REVERSE_PROXY_HOST: http://central:8383
  #     odk.fmtm.localhost_REVERSE_PROXY_URL: ~ ^/v\d
  #     # buffer requests, but not responses, so streaming out works
  #     odk.fmtm.localhost_REVERSE_PROXY_BUFFERING: no
  #     odk.fmtm.localhost_MAX_CLIENT_SIZE: 500m
  #     # Service for local development only to facilitate https odkcentral
  #     odkcentral_REVERSE_PROXY_HOST: http://central:8383
  #     odkcentral_REVERSE_PROXY_URL: ~ ^/v\d
  #     odkcentral_REVERSE_PROXY_BUFFERING: no
  #     # Custom cert only for local development
  #     odkcentral_USE_CUSTOM_SSL: yes
  #     odkcentral_AUTO_REDIRECT_HTTP_TO_HTTPS: no
  #     odkcentral_CUSTOM_SSL_CERT_DATA: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5RENDQVhtZ0F3SUJBZ0lVWXFyb0dWRVdsK204eU9OY2pUU2pCWThkckN3d0NnWUlLb1pJemowRUF3SXcKRlRFVE1CRUdBMVVFQXd3S2IyUnJZMlZ1ZEhKaGJEQWdGdzB5TkRBM01qTXhNakF6TVRWYUdBOHlNVEkwTURZeQpPVEV5TURNeE5Wb3dGVEVUTUJFR0ExVUVBd3dLYjJSclkyVnVkSEpoYkRCMk1CQUdCeXFHU000OUFnRUdCU3VCCkJBQWlBMklBQktSZmpOQVFzWUI0ekNXckdETHdKNEVIRDRTNW5rL1Z3aG00TmYwN203c0RTai9RTzlYK0JnNjIKeWlMbWVzT1ZMRExHRklpZXZ2aHIrZkxNY0YwUDQwN0FWKytER1o5bXZ6VmNwMVdZMlE5NllpTVVuelM3MWx0RQo4K3BXbFBmanRLT0JoekNCaERBZEJnTlZIUTRFRmdRVWNVekZsNUpWN1dUM045VUhxbmhSRHlWT3ZjY3dId1lEClZSMGpCQmd3Rm9BVWNVekZsNUpWN1dUM045VUhxbmhSRHlWT3ZjY3dEd1lEVlIwVEFRSC9CQVV3QXdFQi96QXgKQmdOVkhSRUVLakFvZ2dwdlpHdGpaVzUwY21Gc2doUXFMbTlrYXk1bWJYUnRMbXh2WTJGc2FHOXpkSWNFQ2hRZQpNakFLQmdncWhrak9QUVFEQWdOcEFEQm1BakVBb2xuOGRubmlQN0dKSEJPQW4rTHVCV0ZhaUY1NHFZRmpTYyt1Clpia1cwY1pyNWw2VnZ6WVlBdGdWbUtOdTB5WWRBakVBMWlvT2JRTERYdDV3S1JPWjV5VUtmbys2T21IbTV1NWkKQU5LUHd2MExqc2ZIYk5hbzJMWnduK0VxTjNtdUpPNXEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  #     odkcentral_CUSTOM_SSL_KEY_DATA: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JRzJBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQklHZU1JR2JBZ0VCQkRCc21pQjBmUU5hR1VobEdpWnMKNks1YVo1K1hUOVM1cFdlWkhZc05SVXRlK2FRZ1hIK0pTSmpwRnFqRnNLN21abldoWkFOaUFBU2tYNHpRRUxHQQplTXdscXhneThDZUJCdytFdVo1UDFjSVp1RFg5TzV1N0Ewby8wRHZWL2dZT3Rzb2k1bnJEbFN3eXhoU0lucjc0CmEvbnl6SEJkRCtOT3dGZnZneG1mWnI4MVhLZFZtTmtQZW1JakZKODB1OVpiUlBQcVZwVDM0N1E9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  #   ports:
  #     - ${FMTM_DEV_PORT:-7050}:8080
  #   networks:
  #     fmtm-net:
  #       ipv4_address: 10.20.30.50
  #   restart: "unless-stopped"

  api:
    image: "ghcr.io/hotosm/fmtm/backend:${GIT_BRANCH}"
    volumes:
      - fmtm_logs:/opt/logs
    depends_on:
      fmtm-db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      s3:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/__lbheartbeat__"]
      start_period: 60s
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          cpus: "0.9"
          memory: 1500M
        reservations:
          cpus: "0.1"
          memory: 100M

  ui:
    # This service simply builds the frontend to a volume
    # accessible to the proxy, then shuts down
    image: "ghcr.io/hotosm/fmtm/frontend:${GIT_BRANCH:-development}"
    build:
      context: src
      dockerfile: Dockerfile.ui.prod
      args:
        APP_VERSION: ${GIT_BRANCH}
        VITE_API_URL: https://${FMTM_API_DOMAIN:-api.${FMTM_DOMAIN}}
        VITE_SYNC_URL: https://${FMTM_SYNC_DOMAIN:-sync.${FMTM_DOMAIN}}
    volumes:
      - fmtm_frontend:/frontend
    network_mode: none
    restart: "on-failure:2"

  central:
    image: "ghcr.io/hotosm/fmtm/odkcentral:${ODK_CENTRAL_TAG:-v2024.2.1}"
    depends_on:
      central-db:
        condition: service_healthy
      s3:
        condition: service_healthy
      pyxform:
        condition: service_started
    environment:
      - DOMAIN=${FMTM_ODK_DOMAIN:-odk.${FMTM_DOMAIN}}
      - SSL_TYPE=upstream
      - SYSADMIN_EMAIL=${ODK_CENTRAL_USER}
      - SYSADMIN_PASSWD=${ODK_CENTRAL_PASSWD}
      - HTTPS_PORT=443
      - DB_HOST=${CENTRAL_DB_HOST:-central-db}
      - DB_USER=${CENTRAL_DB_USER}
      - DB_PASSWORD=${CENTRAL_DB_PASSWORD}
      - DB_NAME=${CENTRAL_DB_NAME}
      - DB_SSL=null
      - EMAIL_FROM=${ODK_CENTRAL_USER}
      - EMAIL_HOST=${EMAIL_HOST:-mail}
      - EMAIL_PORT=${EMAIL_PORT:-25}
      - EMAIL_SECURE=${EMAIL_SECURE:-false}
      - EMAIL_IGNORE_TLS=${EMAIL_IGNORE_TLS:-true}
      - EMAIL_USER=${EMAIL_USER:-''}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-''}
      - OIDC_ENABLED=${OIDC_ENABLED:-false}
      - SENTRY_ORG_SUBDOMAIN=${SENTRY_ORG_SUBDOMAIN:-o130137}
      - SENTRY_KEY=${SENTRY_KEY:-3cf75f54983e473da6bd07daddf0d2ee}
      - SENTRY_PROJECT=${SENTRY_PROJECT:-1298632}
      - S3_SERVER=${S3_ENDPOINT:-https://s3.${FMTM_DOMAIN}}
      - S3_BUCKET_NAME=${S3_ODK_BUCKET_NAME:-"fmtm-odk-media"}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-webhook:
    image: "ghcr.io/hotosm/central-webhook:${ODK_WEBHOOK_TAG:-0.1.0-rc}"
    depends_on:
      central:
        condition: service_healthy
    environment:
      CENTRAL_WEBHOOK_DB_URI: postgresql://${CENTRAL_DB_USER}:${CENTRAL_DB_PASSWORD}@central-db:5432/${CENTRAL_DB_NAME}?sslmode=disable
      CENTRAL_WEBHOOK_UPDATE_ENTITY_URL: http://api:8000/integrations/webhooks/entity-status
      # CENTRAL_WEBHOOK_REVIEW_SUBMISSION_URL: http://api:8000/integrations/webhooks/entity-status
      CENTRAL_WEBHOOK_API_KEY: ${CENTRAL_WEBHOOK_API_KEY}
      CENTRAL_WEBHOOK_LOG_LEVEL: ${CENTRAL_WEBHOOK_LOG_LEVEL:-INFO}
    networks:
      - fmtm-net
    restart: "unless-stopped"

  pyxform:
    image: "ghcr.io/getodk/pyxform-http:v3.0.0"
    depends_on:
      central-db:
        condition: service_healthy
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-ui:
    # This service simply builds the frontend to a volume
    # accessible to the proxy, then shuts down
    image: "ghcr.io/hotosm/fmtm/odkcentral-ui:${ODK_CENTRAL_TAG:-v2024.2.1}"
    volumes:
      - central_frontend:/frontend
    network_mode: none
    restart: "on-failure:2"

  s3:
    image: "docker.io/minio/minio:${MINIO_TAG:-RELEASE.2025-01-20T14-49-07Z}"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_VOLUMES: "/mnt/data"
      MINIO_BROWSER: "off"
    volumes:
      - fmtm_data:/mnt/data
    networks:
      - fmtm-net
    command: minio server
    restart: "unless-stopped"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      retries: 3
      start_period: 5s
      timeout: 5s

  fmtm-db:
    image: "postgis/postgis:${POSTGIS_TAG:-14-3.5-alpine}"
    command: -c 'max_connections=300' -c 'wal_level=logical'
    volumes:
      - fmtm_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${FMTM_DB_USER}
      - POSTGRES_PASSWORD=${FMTM_DB_PASSWORD}
      - POSTGRES_DB=${FMTM_DB_NAME}
    ports:
      - "5433:5432"
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: pg_isready -U ${FMTM_DB_USER} -d ${FMTM_DB_NAME}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  electric:
    image: "electricsql/electric:${ELECTRIC_TAG:-1.0.0-beta.10}"
    depends_on:
      fmtm-db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${FMTM_DB_USER}:${FMTM_DB_PASSWORD}@${FMTM_DB_HOST:-fmtm-db}/${FMTM_DB_NAME:-fmtm}?sslmode=disable
      # OTEL_EXPORT: otlp
      # OTLP_ENDPOINT: https://...
      # ELECTRIC_WRITE_TO_PG_MODE: direct_writes
    networks:
      - fmtm-net
    restart: "unless-stopped"

  central-db:
    image: "postgis/postgis:${POSTGIS_TAG:-14-3.5-alpine}"
    volumes:
      - central_db_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${CENTRAL_DB_USER}
      - POSTGRES_PASSWORD=${CENTRAL_DB_PASSWORD}
      - POSTGRES_DB=${CENTRAL_DB_NAME}
    ports:
      - "5434:5432"
    networks:
      - fmtm-net
    restart: "unless-stopped"
    healthcheck:
      test: pg_isready -U ${CENTRAL_DB_USER} -d ${CENTRAL_DB_NAME}
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  migrations:
    image: "ghcr.io/hotosm/fmtm/backend:${GIT_BRANCH}"
    depends_on:
      fmtm-db:
        condition: service_healthy
      s3:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fmtm-net
    entrypoint: ["/migrate-entrypoint.sh"]
    restart: "on-failure:2"

  scheduler:
    extends:
      file: ../compose.yaml
      service: scheduler
    image: "ghcr.io/hotosm/fmtm/backend:${GIT_BRANCH}"

  certbot:
    image: "ghcr.io/hotosm/fmtm/proxy:certs-init-development"
    volumes:
      - certs:/etc/letsencrypt
      - certbot_data:/var/www/certbot
    environment:
      FMTM_DOMAIN: ${FMTM_DOMAIN}
      FMTM_API_DOMAIN: ${FMTM_API_DOMAIN:-api.${FMTM_DOMAIN}}
      FMTM_ODK_DOMAIN: ${FMTM_ODK_DOMAIN:-odk.${FMTM_DOMAIN}}
      FMTM_S3_DOMAIN: ${FMTM_S3_DOMAIN:-s3.${FMTM_DOMAIN}}
      FMTM_SYNC_DOMAIN: ${FMTM_SYNC_DOMAIN:-sync.${FMTM_DOMAIN}}
      CERT_EMAIL: ${CERT_EMAIL}
    ports:
      - 80:80
      - 443:443
    networks:
      - fmtm-net
    restart: "on-failure:2"
