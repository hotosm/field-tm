# Copyright (c) Humanitarian OpenStreetMap Team
#
# This file is part of Field-TM.
#
#     Field-TM is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     Field-TM is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with Field-TM.  If not, see <https:#www.gnu.org/licenses/>.
#

# List available commands
[private]
default:
  just --justfile {{justfile()}} --list config

# Check if a dotenv variable is present
[no-cd]
[no-exit-message]
_dotenv-check key:
  #!/usr/bin/env sh
  if [ -z "${{ key }}" ]; then
      echo "Environment variable {{ key }} is not set."
      exit 1
  fi

# Update a variable in the .env file
[no-cd]
update-dotenv key value:
  #!/usr/bin/env sh

  var_name={{key}}
  var_value={{value}}
  var_pattern="^${var_name}="
  new_var="${var_name}=${var_value}"

  if grep -Eq "${var_pattern}" .env; then
    sed -i "s|${var_pattern}.*|${new_var}|" .env
  else
    echo "${new_var}" >> .env
  fi

# Generate the .env file from scratch, using .env.example and substitutions
[no-cd]
generate-dotenv branch="dev":
  #!/usr/bin/env sh
  set -e

  # By default we deploy from 'dev' branch, but can be overridden

  cd {{justfile_directory()}}

  # Re-export .env to the environment, with cleaned variables
  if [ -f .env ]; then
    just _echo-yellow "'.env' file already exists. Skipping dotenv generation."
    exit 0
  fi

  just manage _install_envsubst

  # Generate a .env file from .env.example, substituting values from environment
  ./envsubst -i .env.example | grep -vE '^\s*#|^\s*$' > .env

  # Re-export .env to the environment, with cleaned variables
  if [ -f .env ]; then
      while IFS= read -r line; do
          # Remove surrounding quotes (single or double)
          clean_line=$(echo "$line" | sed -E 's/^([^=]+)=(["'\'']?)(.*)\2$/\1=\3/')
          var_name=$(echo "$clean_line" | cut -d= -f1)
          var_value=$(echo "$clean_line" | cut -d= -f2-)
          export "$var_name=$var_value"
      done < .env
  fi

  # Generate compose file (default dev, but can be overridden)
  export GIT_BRANCH="{{ branch }}"
  echo ""
  just _echo-blue "Final compose file output for branch {{ branch }}:"
  echo ""
  # NOTE we run through envsubst twice for nested vars
  ./envsubst -i deploy/compose.sub.yaml | ./envsubst

# For custom branding, place favicon.svg in the repo root, then run this
[no-cd]
custom-favicon:
  #!/usr/bin/env sh

  cd {{justfile_directory()}}

  # Copy favicon to required directories, if present
  if [ ! -f favicon.svg ]; then
    just _echo-yellow "'favicon.svg' not found in the repo root. Skipping custom favicon injection."
    exit 0
  fi

  echo ""
  echo "Found favicon.svg in repo root - bundling in frontend build"
  echo ""
  # Pull ImageMagick container if not already present
  docker pull dpokidov/imagemagick:7.1.1-47

  # Convert SVG to PNG (32x32, aspect ratio preserved, transparent padding)
  docker run --rm -v "$PWD":/repo --workdir /repo --entrypoint=/bin/sh \
      dpokidov/imagemagick:7.1.1-47 \
      -c "magick favicon.svg -resize 32x32 -background none -gravity center -extent 32x32 favicon.png"

  # Copy to frontend and mapper static content
  cp favicon.svg src/frontend/public/favicon.svg
  cp favicon.svg src/mapper/static/favicon.svg
  cp favicon.png src/frontend/public/favicon.png
  cp favicon.png src/mapper/static/favicon.png

  # Then prevent tracking of the changes once overridden
  git update-index --assume-unchanged src/frontend/public/favicon.svg
  git update-index --assume-unchanged src/frontend/public/favicon.png
  git update-index --assume-unchanged src/mapper/static/favicon.svg
  git update-index --assume-unchanged src/mapper/static/favicon.png

  just _echo-blue "Successfully added custom favicon.svg and favicon.png to frontend"

# Configure web-forms for the mapper frontend (local only)
[no-cd]
enable-webforms:
  #!/usr/bin/env sh
  set -e

  CONTAINER=fmtm-central-1
  CONFIG_PATH=src/mapper/static/config.json
  CONTAINER_CONFIG_PATH=/usr/odk/config.json

  # Copy config into container
  docker cp "$CONFIG_PATH" "$CONTAINER":"$CONTAINER_CONFIG_PATH"

  # Modify JSON using jq inside the container
  docker exec "$CONTAINER" sh -c \
    "jq '.enableWebforms = true' '${CONTAINER_CONFIG_PATH}' > '${CONTAINER_CONFIG_PATH}.tmp' && mv '${CONTAINER_CONFIG_PATH}.tmp' '${CONTAINER_CONFIG_PATH}'"

  # Upload updated config to S3
  docker exec "$CONTAINER" mc cp "$CONTAINER_CONFIG_PATH" s3/fmtm-data/frontend/config.json

# Merge in translations from weblate
[no-cd]
merge-translations:
  git remote add weblate https://hosted.weblate.org/git/hotosm/field-tm-mapper-ui || true
  git fetch weblate
  git merge weblate/dev
