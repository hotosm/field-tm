name: pytest

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      environment:
        required: false
        type: string

permissions:
  contents: read

jobs:
  cache-img-postgis:
    uses: hotosm/gh-workflows/.github/workflows/image_cache.yml@main
    with:
      image_name: postgis/postgis:14-3.3-alpine
      cache_key: img-postgis

  cache-img-odk:
    uses: hotosm/gh-workflows/.github/workflows/image_cache.yml@main
    with:
      image_name: ghcr.io/hotosm/fmtm/odkcentral:v2023.2.1
      cache_key: img-odk

  cache-img-odk-proxy:
    uses: hotosm/gh-workflows/.github/workflows/image_cache.yml@main
    with:
      image_name: ghcr.io/hotosm/fmtm/odkcentral-proxy:latest
      cache_key: img-odk-proxy

  run-pytest:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'test' }}
    needs:
      - cache-img-postgis
      - cache-img-odk
      - cache-img-odk-proxy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Img Caches
        id: restore-imgs
        uses: actions/cache@v3
        with:
          path: |
            ${{ needs.cache-img-postgis.outputs.cache_path }}
            ${{ needs.cache-img-odk.outputs.cache_path }}
            ${{ needs.cache-img-odk-proxy-cache.outputs.cache_path }}
          key: img-
          restore-keys: |
            ${{ needs.cache-img-postgis.outputs.cache_key }}
            ${{ needs.cache-img-odk.outputs.cache_key }}
            ${{ needs.cache-img-odk-proxy-cache.outputs.cache_key }}

      - name: Load Cached Imgs
        if: steps.restore-imgs.outputs.cache-hit == 'true'
        run: |
          docker image load --input ${{ needs.cache-img-postgis.outputs.cache_path }} || true
          docker image load --input ${{ needs.cache-img-odk.outputs.cache_path }} || true
          docker image load --input ${{ needs.cache-img-odk-proxy-cache.outputs.cache_path }} || true

      - name: Environment to .env
        env:
          DEBUG: True
          LOG_LEVEL: DEBUG
          API_TAG_OVERRIDE: "${{ inputs.image_tag }}"
          FRONTEND_MAIN_URL: "${{ vars.FRONTEND_MAIN_URL }}"
          ODK_CENTRAL_URL: "${{ vars.ODK_CENTRAL_URL }}"
          ODK_CENTRAL_USER: "${{ vars.ODK_CENTRAL_USER }}"
          ODK_CENTRAL_PASSWD: "${{ secrets.ODK_CENTRAL_PASSWD }}"
          OSM_CLIENT_ID: "${{ secrets.OSM_CLIENT_ID }}"
          OSM_CLIENT_SECRET: "${{ secrets.OSM_CLIENT_SECRET }}"
          OSM_SECRET_KEY: "${{ secrets.OSM_SECRET_KEY }}"
          S3_ACCESS_KEY: "fmtm"
          S3_SECRET_KEY: "somelongpassword"
        run: |
          echo "DEBUG=${DEBUG}" >> .env
          echo "LOG_LEVEL=${LOG_LEVEL}" >> .env
          echo "API_TAG_OVERRIDE=${API_TAG_OVERRIDE}" >> .env
          echo "FRONTEND_MAIN_URL=${FRONTEND_MAIN_URL}" >> .env
          echo "ODK_CENTRAL_URL=${ODK_CENTRAL_URL}" >> .env
          echo "ODK_CENTRAL_USER=${ODK_CENTRAL_USER}" >> .env
          echo "ODK_CENTRAL_PASSWD=${ODK_CENTRAL_PASSWD}" >> .env
          echo "OSM_CLIENT_ID=${OSM_CLIENT_ID}" >> .env
          echo "OSM_CLIENT_SECRET=${OSM_CLIENT_SECRET}" >> .env
          echo "OSM_SECRET_KEY=${OSM_SECRET_KEY}" >> .env
          echo "S3_ACCESS_KEY=${S3_ACCESS_KEY}" >> .env
          echo "S3_SECRET_KEY=${S3_SECRET_KEY}" >> .env

      - name: Run PyTest
        run: |
          docker compose run api \
            wait-for-it fmtm-db:5432 --strict \
            -- wait-for-it central:8383 --strict \
            -- pytest
