name: pytest

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      environment:
        required: false
        type: string

permissions:
  contents: read

jobs:
  run-pytest:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'test' }}

    outputs:
      img_cache_loaded: ${{ steps.load-cache.outputs.img_cache_loaded }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: download-images
        name: Download image cache
        uses: actions/download-artifact@v3
        with:
          name: image-cache
          path: /tmp/images
        continue-on-error: true

      - name: Load Cached Imgs
        id: load-cache
        if: ${{ steps.download-images.outputs.download_path == '/tmp/images' }}
        run: |
          for image_tar in /tmp/images/*; do
              docker image load --input $image_tar || true
          done
          echo "img_cache_loaded=true" >> $GITHUB_OUTPUT

      - name: Vars and Secrets to Env
        env:
          API_TAG_OVERRIDE: ${{ inputs.image_tag }}
          GIT_BRANCH: ${{ github.ref_name }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          to_envs() { jq -r "to_entries[] | \"\(.key)=\(.value)\""; }

          echo "API_TAG_OVERRIDE=${API_TAG_OVERRIDE}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV
          echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV

      - name: Create .env file
        run: env > .env

      - name: Run PyTest
        run: |
          docker compose run api \
            wait-for-it fmtm-db:5432 --strict \
            -- wait-for-it central:8383 --strict --timeout=30 \
            -- pytest

  cache-images:
    needs: [run-pytest]
    if: ${{ needs.run-pytest.outputs.img_cache_loaded != true}}
    uses: hotosm/gh-workflows/.github/workflows/image_cache.yml@main
    with:
      image_names: |
        docker.io/postgis/postgis:${{ vars.POSTGIS_TAG }}
        ghcr.io/hotosm/fmtm/odkcentral:${{ vars.ODK_CENTRAL_TAG }}
        ghcr.io/hotosm/fmtm/odkcentral-proxy:${{ vars.ODK_CENTRAL_TAG }}
        docker.io/minio/minio:${{ vars.MINIO_TAG }}
      artifact_name: image-cache
