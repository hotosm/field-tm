name: pytest

on:
  workflow_call:
    inputs:
      image_tag:
        description: "Optional image tag override."
        required: false
        type: string
        default: ci-development
      build_test_img:
        description: "Build an image prior to test, e.g. if new deps added."
        required: false
        type: boolean
        default: false
      cache_imgs:
        description: "Space separated list of images to cache on each run."
        required: false
        type: string
      docker_compose_file:
        description: "The docker compose file used to run the test."
        required: false
        type: string
        default: docker-compose.yml
      docker_compose_service:
        description: "The docker compose service to run the test against."
        required: true
        type: string
      environment:
        description: "The environment to use for testing."
        required: false
        type: string
        default: "test"

jobs:
  check-img-cache:
    runs-on: ubuntu-latest
    if: ${{ inputs.cache_imgs }}
    environment:
      name: ${{ inputs.environment }}
    outputs:
      cache-hit: ${{ steps.image-cache.outputs.cache-hit }}
    steps:
      - id: image-cache
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

  backend-test-build:
    uses: hotosm/gh-workflows/.github/workflows/image_build.yml@main
    needs: [check-img-cache]
    if: ${{ inputs.build_test_img && needs.check-img-cache.outputs.cache-hit != 'true' }}
    with:
      context: src/backend
      build_target: ci
      image_name: ghcr.io/${{ github.repository }}/backend
      build_args: |
        APP_VERSION=${{ github.ref_name }}
        COMMIT_REF=${{ github.sha }}
      # Build temp image for PR, no multi-arch or scan required
      multi_arch: false
      scan: false
      cache: false

  run-pytest:
    runs-on: ubuntu-latest
    needs: [backend-test-build]
    # Ensure it runs, even if build_test_img=false
    if: always()
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: image-cache
        if: ${{ inputs.cache_imgs }}
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

      - name: Save Local Images
        if: ${{ inputs.cache_imgs && steps.image-cache.outputs.cache-hit != 'true' }}
        run: |
          # Function to pull and package Docker image
          function pull_and_package_image() {
            local image=$1
            echo "Processing image ${image}"
            docker pull "${image}"

            if [ $? -eq 0 ]; then
              img_underscores=${image//[:\/.]/_}
              echo "Packaging image to /tmp/images/${img_underscores}.tar"
              docker image save "${image}" --output "/tmp/images/${img_underscores}.tar"
            else
              echo "Failed to pull the image: ${image}"
            fi
          }

          # Make artifact dir
          mkdir -p /tmp/images

          images_array=${{ inputs.cache_imgs }}

          # Iterate through dependency images
          for image in "${images_array[@]}"; do
            pull_and_package_image "$image"
          done

          # Cache backend build
          image_tag=${{ needs.backend-test-build.outputs.image_tag || inputs.image_tag }}
          image="ghcr.io/${{ github.repository }}/backend:${image_tag}"
          pull_and_package_image "$image"
          echo "API_TAG_OVERRIDE=${image_tag}" >> $GITHUB_ENV

      - name: Load Cached Imgs
        if: ${{ inputs.cache_imgs && steps.image-cache.outputs.cache-hit == 'true' }}
        run: |
          for image_tar in /tmp/images/*; do
              docker image load --input $image_tar || true
          done

          # Set API_TAG_OVERRIDE if not set
          echo "Getting backend image tag via docker"
          image=$(\
            docker image ls \
            --filter=reference='ghcr.io/${{ github.repository }}/backend' \
            --format='{{.Tag}}'\
          )
          image_tag="${image##*:}"
          echo "Image Tag: $image_tag"
          echo "API_TAG_OVERRIDE=${image_tag}" >> $GITHUB_ENV

      - name: Vars and Secrets to Env
        env:
          API_TAG_OVERRIDE: ${{ env.API_TAG_OVERRIDE }}
          GIT_BRANCH: ${{ github.ref_name }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          to_envs() { jq -r "to_entries[] | \"\(.key)=\(.value)\""; }

          echo "API_TAG_OVERRIDE=${API_TAG_OVERRIDE}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV
          echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV

      - name: Create .env file
        run: env > .env

      - name: Run PyTest
        run: |
          docker compose --file ${{ inputs.docker_compose_file }} \
            run ${{ inputs.docker_compose_service }} \
            wait-for-it fmtm-db:5432 --strict \
            -- wait-for-it central:8383 --strict --timeout=30 \
            -- pytest
