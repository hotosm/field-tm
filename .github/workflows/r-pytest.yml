name: pytest

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      environment:
        required: false
        type: string

permissions:
  contents: read

jobs:
  run-pytest:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'test' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: image-cache
        uses: actions/cache@v3
        with:
          path: /tmp/images
          key: image-cache-${{ runner.os }}

      - name: Save Local Images
        if: steps.image-cache.outputs.cache-hit != 'true'
        run: |
          # Make artifact dir
          mkdir -p /tmp/images

          images_array=()
          images_array+=("docker.io/postgis/postgis:${{ vars.POSTGIS_TAG }}")
          images_array+=("ghcr.io/hotosm/fmtm/odkcentral:${{ vars.ODK_CENTRAL_TAG }}")
          images_array+=("ghcr.io/hotosm/fmtm/odkcentral-proxy:${{ vars.ODK_CENTRAL_TAG }}")
          images_array+=("docker.io/minio/minio:${{ vars.MINIO_TAG }}")

          # Iterate images
          for image in "${images_array[@]}"; do
              echo "Processing image ${image}"
              docker pull "${image}"

              if [ $? -eq 0 ]; then
                  img_underscores=${image//[:\/.]/_}
                  echo "Packaging image to /tmp/images/${img_underscores}.tar"
                  docker image save "${image}" \
                      --output /tmp/images/${img_underscores}.tar
              else
                  echo "Failed to pull the image: ${image}"
              fi
          done

      - name: Load Cached Imgs
        if: steps.image-cache.outputs.cache-hit == 'true'
        run: |
          for image_tar in /tmp/images/*; do
              docker image load --input $image_tar || true
          done

      - name: Vars and Secrets to Env
        env:
          API_TAG_OVERRIDE: ${{ inputs.image_tag }}
          GIT_BRANCH: ${{ github.ref_name }}
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          to_envs() { jq -r "to_entries[] | \"\(.key)=\(.value)\""; }

          echo "API_TAG_OVERRIDE=${API_TAG_OVERRIDE}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $GITHUB_ENV
          echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV

      - name: Create .env file
        run: env > .env

      - name: Run PyTest
        run: |
          docker compose run api \
            wait-for-it fmtm-db:5432 --strict \
            -- wait-for-it central:8383 --strict --timeout=30 \
            -- pytest
