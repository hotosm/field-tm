export default [
  {
    "statements": [
      "CREATE TYPE taskstatus AS ENUM (\n 'READY',\n 'LOCKED_FOR_MAPPING',\n 'MAPPED',\n 'LOCKED_FOR_VALIDATION',\n 'VALIDATED',\n 'INVALIDATED',\n 'BAD',\n 'SPLIT',\n 'ARCHIVED'\n)",
      "CREATE TABLE tasks_electric (\n    id integer NOT NULL,\n    project_id integer NOT NULL,\n    project_task_index integer,\n    project_task_name character varying,\n    geometry_geojson character varying,\n    feature_count integer,\n    task_status taskstatus,\n    locked_by bigint,\n    mapped_by bigint,\n    validated_by bigint,\n    CONSTRAINT tasks_pkey_1 PRIMARY KEY (id, project_id)\n)",
      "CREATE INDEX ix_tasks_locked_by_1 ON public.tasks_electric USING btree (locked_by)",
      "CREATE INDEX ix_tasks_mapped_by_1 ON public.tasks_electric USING btree (mapped_by)",
      "CREATE INDEX ix_tasks_project_id_1 ON public.tasks_electric USING btree (project_id)",
      "CREATE INDEX ix_tasks_validated_by_1 ON public.tasks_electric USING btree (validated_by)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'tasks_electric', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_tasks_electric_primarykey ON \"public\".\"tasks_electric\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_tasks_electric_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  IF OLD.\"project_id\" IS DISTINCT FROM NEW.\"project_id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column project_id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_tasks_electric_primarykey\n  BEFORE UPDATE ON \"public\".\"tasks_electric\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_tasks_electric_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_tasks_electric_into_oplog ON \"public\".\"tasks_electric\";",
      "    CREATE OR REPLACE FUNCTION insert_public_tasks_electric_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks_electric';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks_electric',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\", 'project_id', new.\"project_id\")),\n            jsonb_build_object('feature_count', new.\"feature_count\", 'geometry_geojson', new.\"geometry_geojson\", 'id', new.\"id\", 'locked_by', cast(new.\"locked_by\" as TEXT), 'mapped_by', cast(new.\"mapped_by\" as TEXT), 'project_id', new.\"project_id\", 'project_task_index', new.\"project_task_index\", 'project_task_name', new.\"project_task_name\", 'task_status', new.\"task_status\", 'validated_by', cast(new.\"validated_by\" as TEXT)),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_tasks_electric_into_oplog\n  AFTER INSERT ON \"public\".\"tasks_electric\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_tasks_electric_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_tasks_electric_into_oplog ON \"public\".\"tasks_electric\";",
      "    CREATE OR REPLACE FUNCTION update_public_tasks_electric_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks_electric';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks_electric',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\", 'project_id', new.\"project_id\")),\n            jsonb_build_object('feature_count', new.\"feature_count\", 'geometry_geojson', new.\"geometry_geojson\", 'id', new.\"id\", 'locked_by', cast(new.\"locked_by\" as TEXT), 'mapped_by', cast(new.\"mapped_by\" as TEXT), 'project_id', new.\"project_id\", 'project_task_index', new.\"project_task_index\", 'project_task_name', new.\"project_task_name\", 'task_status', new.\"task_status\", 'validated_by', cast(new.\"validated_by\" as TEXT)),\n            jsonb_build_object('feature_count', old.\"feature_count\", 'geometry_geojson', old.\"geometry_geojson\", 'id', old.\"id\", 'locked_by', cast(old.\"locked_by\" as TEXT), 'mapped_by', cast(old.\"mapped_by\" as TEXT), 'project_id', old.\"project_id\", 'project_task_index', old.\"project_task_index\", 'project_task_name', old.\"project_task_name\", 'task_status', old.\"task_status\", 'validated_by', cast(old.\"validated_by\" as TEXT)),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_tasks_electric_into_oplog\n  AFTER UPDATE ON \"public\".\"tasks_electric\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_tasks_electric_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_tasks_electric_into_oplog ON \"public\".\"tasks_electric\";",
      "    CREATE OR REPLACE FUNCTION delete_public_tasks_electric_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks_electric';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks_electric',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\", 'project_id', old.\"project_id\")),\n            NULL,\n            jsonb_build_object('feature_count', old.\"feature_count\", 'geometry_geojson', old.\"geometry_geojson\", 'id', old.\"id\", 'locked_by', cast(old.\"locked_by\" as TEXT), 'mapped_by', cast(old.\"mapped_by\" as TEXT), 'project_id', old.\"project_id\", 'project_task_index', old.\"project_task_index\", 'project_task_name', old.\"project_task_name\", 'task_status', old.\"task_status\", 'validated_by', cast(old.\"validated_by\" as TEXT)),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_tasks_electric_into_oplog\n  AFTER DELETE ON \"public\".\"tasks_electric\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_tasks_electric_into_oplog_function();"
    ],
    "version": "20240623205608_952"
  }
]