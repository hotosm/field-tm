# Copyright (c) 2022, 2023 Humanitarian OpenStreetMap Team
#
# This file is part of FMTM.
#
#     FMTM is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     FMTM is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with FMTM.  If not, see <https:#www.gnu.org/licenses/>.
#
"""Pydantic schemas for Projects for usage in endpoints."""

from datetime import datetime
from typing import Annotated, Optional, Self

from dateutil import parser
from geojson_pydantic import Feature, FeatureCollection, MultiPolygon, Point, Polygon
from pydantic import (
    BaseModel,
    Field,
    FieldValidationInfo,
)
from pydantic.functional_serializers import field_serializer
from pydantic.functional_validators import field_validator, model_validator

from app.central.central_schemas import ODKCentralIn
from app.config import decrypt_value
from app.db.enums import (
    ProjectPriority,
)
from app.db.models import DbProject
from app.db.postgis_utils import (
    featcol_to_shapely_geom,
    geojson_to_featcol,
    get_address_from_lat_lon,
    merge_polygons,
)


class ProjectInBase(DbProject):
    """Base model for project insert / update (validators)."""

    # Exclude the id field as this is autogenerated in the db
    id: Annotated[Optional[int], Field(exclude=True)] = None
    project_name_prefix: Annotated[
        Optional[str],
        Field(exclude=True, validate_default=True),
    ] = None
    # Override hashtag input to simply be a single string
    hashtags: Annotated[
        Optional[str],
        Field(validate_default=True),
    ] = None

    @field_validator("project_name_prefix", mode="after")
    @classmethod
    def set_project_name_prefix(
        cls,
        value: Optional[str],
        info: FieldValidationInfo,
    ) -> str:
        """Set the project name prefix attribute from the name.

        NOTE this is a bit of a hack.
        """
        return info.data.get("name").replace(" ", "_").lower()

    @field_validator("hashtags", mode="after")
    @classmethod
    def validate_hashtags(cls, hashtags: Optional[str]) -> list[str]:
        """Validate hashtags.

        - Receives a string and parsed as a list of tags.
        - Commas or semicolons are replaced with spaces before splitting.
        - Add '#' to hashtag if missing.
        - Also add default '#FMTM' tag.
        """
        if hashtags is None:
            return ["#FMTM"]

        hashtags = hashtags.replace(",", " ").replace(";", " ")
        hashtags_list = hashtags.split()

        # Add '#' to hashtag strings if missing
        hashtags_with_hash = [
            f"#{hashtag}" if hashtag and not hashtag.startswith("#") else hashtag
            for hashtag in hashtags_list
        ]

        if "#FMTM" not in hashtags_with_hash:
            hashtags_with_hash.append("#FMTM")

        return hashtags_with_hash

    @field_validator("outline", mode="before")
    @classmethod
    def outline_geojson_to_featcol(
        cls,
        value: FeatureCollection | Feature | MultiPolygon | Polygon,
    ) -> FeatureCollection:
        """Convert input geojson to FeatureCollection for consistency.

        NOTE we run this in mode='before' to allow parsing as Feature first.
        """
        featcol = geojson_to_featcol(value.model_dump())
        return merge_polygons(featcol)


class ProjectIn(ProjectInBase, ODKCentralIn):
    """Upload new project."""

    xform_category: str
    # TODO SQL we should update this logic to only provide Polygon outline...
    # NOTE this means the final output will be a FeatureCollection
    outline: FeatureCollection

    @model_validator(mode="after")
    def generate_location_str(self) -> Self:
        """Generate location string after centroid is generated.

        NOTE we use a model_validator as it's guaranteed to only run once.
        NOTE if we use computed then nominatim is called multiple times,
        NOTE as computed fields cannot wait for a http call async.
        """
        geom = featcol_to_shapely_geom(self.outline)
        centroid = geom.centroid
        latitude, longitude = centroid.y, centroid.x
        address = get_address_from_lat_lon(latitude, longitude)
        self.location_str = address if address is not None else ""
        return self


class ProjectUpdate(ProjectInBase, ODKCentralIn):
    """Update a project, where all fields are optional."""

    # Allow updating the name field
    name: Optional[str] = None
    outline: Optional[FeatureCollection] = None


class ProjectOut(DbProject):
    """Converters for DbProject serialisation & display."""

    # Parse as geojson_pydantic.Polygon
    outline: Polygon
    # Parse as geojson_pydantic.Point
    centroid: Point

    @field_serializer("odk_token")
    def decrypt_password(self, value: str) -> Optional[str]:
        """Decrypt the ODK Token extracted from the db."""
        if not value:
            return ""

        return decrypt_value(value)


class ProjectSummary(BaseModel):
    """Project summaries."""

    id: int
    organisation_id: int
    priority: ProjectPriority
    title: Optional[str] = None
    location_str: Optional[str] = None
    description: Optional[str] = None
    hashtags: Optional[list[str]] = None

    # Calculated
    outline: Optional[Polygon]
    centroid: Optional[Point]
    total_tasks: Optional[int] = None
    num_contributors: Optional[int] = None
    tasks_mapped: Optional[int] = None
    tasks_validated: Optional[int] = None
    tasks_bad: Optional[int] = None


class PaginationInfo(BaseModel):
    """Pagination JSON return."""

    has_next: bool
    has_prev: bool
    next_num: Optional[int]
    page: int
    pages: int
    prev_num: Optional[int]
    per_page: int
    total: int


class PaginatedProjectSummaries(BaseModel):
    """Project summaries + Pagination info."""

    results: list[ProjectSummary]
    pagination: PaginationInfo


class BackgroundTaskStatus(BaseModel):
    """Background task status for project related tasks."""

    status: str
    message: Optional[str] = None


class ProjectDashboard(BaseModel):
    """Project details dashboard."""

    project_name_prefix: str
    organisation_name: str
    total_tasks: int
    created_at: datetime
    organisation_logo: Optional[str] = None
    total_submission: Optional[int] = None
    total_contributors: Optional[int] = None
    last_active: Optional[str | datetime] = None

    @field_serializer("last_active")
    def get_last_active(self, value, values):
        """Date of last activity on project."""
        if value is None:
            return None

        last_active = parser.parse(value).replace(tzinfo=None)
        current_date = datetime.now()

        time_difference = current_date - last_active

        days_difference = time_difference.days

        if days_difference == 0:
            return "today"
        elif days_difference == 1:
            return "yesterday"
        elif days_difference < 7:
            return f'{days_difference} day{"s" if days_difference > 1 else ""} ago'
        else:
            return last_active.strftime("%d %b %Y")
